#!/bin/bash

VERSION=$(git describe)
TMP_DIST=`mktemp -d`
CURPATH=`pwd`
BUILD_LOG=`echo "${TMP_DIST}/buildlog.txt"`

# PIO 3.x :
# BINARY_PATH=".pioenvs"

# PIO 4.0 and newer:
BINARY_PATH=".pio/build"

while getopts d: option
do
case "${option}"
in
d) VERSION=${OPTARG};;
esac
done


if [ ! -d ${TMP_DIST} ]; then
  # Could not create temp dir, so exit
  exit 1
fi

echo "### Creating zip archives"

#Naming convention:
# ESP_Easy_[github version]_[plugin set]_[chip type]_[flash memory].bin

if [ -d "build_output/reject" ]; then
  zip -qq ${CURPATH}/ESPEasy_ELF_files_$VERSION.zip build_output/reject/*
fi

zip -qq ${CURPATH}/ESPEasy_ELF_files_$VERSION.zip build_output/debug/*
echo "### Created ESPEasy_ELF_files_$VERSION.zip"


mkdir -p ${TMP_DIST}
cp -r dist/* ${TMP_DIST}/

if [ -d "docs/build" ]; then
  # Docs have been created
  zip -r -qq ${CURPATH}/ESPEasy_docs_$VERSION.zip docs/build/*
  echo "### Created ESPEasy_docs_$VERSION.zip"
fi

cp -r build_output/bin/* ${TMP_DIST}/bin

#create a source structure that is the same as the original ESPEasy project (and works with the howto on the wiki)
#rm -rf dist/Source 2>/dev/null

mkdir -p ${TMP_DIST}/source
cp -r lib ${TMP_DIST}/source/
cp -r src ${TMP_DIST}/source/
cp -r misc ${TMP_DIST}/source/
cp -r static ${TMP_DIST}/source/
cp -r tools ${TMP_DIST}/source/
cp platformio*.ini ${TMP_DIST}/source/
cp *.txt ${TMP_DIST}/source/
cp *.csv ${TMP_DIST}/source/
cp README* ${TMP_DIST}/source/


cd ${TMP_DIST}

echo
zip -qq ${CURPATH}/ESPEasy_$VERSION.zip -r .
echo "### Created ESPEasy_$VERSION.zip"


rm -Rf ${TMP_DIST}/* 2>/dev/null
rmdir ${TMP_DIST}
